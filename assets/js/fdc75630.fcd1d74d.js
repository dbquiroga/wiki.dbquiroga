"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9791],{5680:(e,a,n)=>{n.d(a,{xA:()=>d,yg:()=>y});var r=n(6540);function t(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function l(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?l(Object(n),!0).forEach((function(a){t(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function i(e,a){if(null==e)return{};var n,r,t=function(e,a){if(null==e)return{};var n,r,t={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],a.indexOf(n)>=0||(t[n]=e[n]);return t}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(t[n]=e[n])}return t}var s=r.createContext({}),c=function(e){var a=r.useContext(s),n=a;return e&&(n="function"==typeof e?e(a):o(o({},a),e)),n},d=function(e){var a=c(e.components);return r.createElement(s.Provider,{value:a},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},g=r.forwardRef((function(e,a){var n=e.components,t=e.mdxType,l=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=c(n),g=t,y=p["".concat(s,".").concat(g)]||p[g]||u[g]||l;return n?r.createElement(y,o(o({ref:a},d),{},{components:n})):r.createElement(y,o({ref:a},d))}));function y(e,a){var n=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var l=n.length,o=new Array(l);o[0]=g;var i={};for(var s in a)hasOwnProperty.call(a,s)&&(i[s]=a[s]);i.originalType=e,i[p]="string"==typeof e?e:t,o[1]=i;for(var c=2;c<l;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},6273:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var r=n(8168),t=(n(6540),n(5680));const l={sidebar_position:0,title:"Variables, tipos de datos y operadores."},o=void 0,i={unversionedId:"javascript/variables",id:"javascript/variables",title:"Variables, tipos de datos y operadores.",description:"E",source:"@site/docs/javascript/variables.md",sourceDirName:"javascript",slug:"/javascript/variables",permalink:"/wiki.dbquiroga/docs/javascript/variables",draft:!1,editUrl:"https://github.com/dbquiroga/wiki.dbquiroga/edit/main/docs/javascript/variables.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0,title:"Variables, tipos de datos y operadores."},sidebar:"tutorialSidebar",previous:{title:"Modificadores de accesos",permalink:"/wiki.dbquiroga/docs/java/modificadores_de_accesos"},next:{title:"Objetos y mejotodos en js",permalink:"/wiki.dbquiroga/docs/javascript/objetos"}},s={},c=[{value:"String",id:"string",level:3},{value:"N\xfameros",id:"n\xfameros",level:3},{value:"Booleanos",id:"booleanos",level:3},{value:"Undefined",id:"undefined",level:3},{value:"Null",id:"null",level:3},{value:"Alcance (Scope)",id:"alcance-scope",level:2},{value:"Alcance de Funci\xf3n (Function Scope)",id:"alcance-de-funci\xf3n-function-scope",level:3},{value:"Alcance de Bloque (Block Scope)",id:"alcance-de-bloque-block-scope",level:2}],d={toc:c},p="wrapper";function u(e){let{components:a,...n}=e;return(0,t.yg)(p,(0,r.A)({},d,n,{components:a,mdxType:"MDXLayout"}),(0,t.yg)("p",null,"E"),(0,t.yg)("h1",{id:"tipos-de-datos-primitivos"},"Tipos de datos primitivos"),(0,t.yg)("p",null,"En JavaScript, los tipos de datos primitivos son los tipos de datos b\xe1sicos que no son objetos y no tienen m\xe9todos. Los tipos de datos primitivos en JavaScript son:"),(0,t.yg)("h3",{id:"string"},"String"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-js"},"var name = 'Day';\n")),(0,t.yg)("h3",{id:"n\xfameros"},"N\xfameros"),(0,t.yg)("p",null,"Representa tanto n\xfameros enteros como de punto flotante."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-js"},"var numeroEntero = 17;\nvar numeroNegativo = -4;\nvar numeroDecimal = 11.75;\n")),(0,t.yg)("h3",{id:"booleanos"},"Booleanos"),(0,t.yg)("p",null,"Representa un valor l\xf3gico que puede ser true o false."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-js"},"var estoyEntendiendo = true;\nvar estoyAburrido = false;\n")),(0,t.yg)("h3",{id:"undefined"},"Undefined"),(0,t.yg)("p",null,"Representa una variable que ha sido declarada pero no asignada."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-js"},"var cajon1;\nconsole.log(cajon1);\n")),(0,t.yg)("h3",{id:"null"},"Null"),(0,t.yg)("p",null,"Representa la ausencia intencional de cualquier valor de objeto."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-js"},"var sinNada = null;\n")),(0,t.yg)("h1",{id:"declaraci\xf3n-de-variables"},"Declaraci\xf3n de variables"),(0,t.yg)("p",null,"Existen tres palabras claves para declarar una variable ",(0,t.yg)("inlineCode",{parentName:"p"},"var"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"let")," y ",(0,t.yg)("inlineCode",{parentName:"p"},"const")),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:null},"Caracter\xedstica"),(0,t.yg)("th",{parentName:"tr",align:null},(0,t.yg)("inlineCode",{parentName:"th"},"var")),(0,t.yg)("th",{parentName:"tr",align:null},(0,t.yg)("inlineCode",{parentName:"th"},"let")),(0,t.yg)("th",{parentName:"tr",align:null},(0,t.yg)("inlineCode",{parentName:"th"},"const")))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"Alcance"),(0,t.yg)("td",{parentName:"tr",align:null},"Funci\xf3n (function scope)"),(0,t.yg)("td",{parentName:"tr",align:null},"Bloque (block scope)"),(0,t.yg)("td",{parentName:"tr",align:null},"Bloque (block scope)")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"Hoisting"),(0,t.yg)("td",{parentName:"tr",align:null},"S\xed, pero no inicializa"),(0,t.yg)("td",{parentName:"tr",align:null},"S\xed, pero no se puede usar antes de declarar"),(0,t.yg)("td",{parentName:"tr",align:null},"S\xed, pero no se puede usar antes de declarar")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"Re-declaraci\xf3n"),(0,t.yg)("td",{parentName:"tr",align:null},"Permitida en el mismo \xe1mbito"),(0,t.yg)("td",{parentName:"tr",align:null},"No permitida en el mismo \xe1mbito"),(0,t.yg)("td",{parentName:"tr",align:null},"No permitida en el mismo \xe1mbito")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"Inmutabilidad"),(0,t.yg)("td",{parentName:"tr",align:null},"No"),(0,t.yg)("td",{parentName:"tr",align:null},"No"),(0,t.yg)("td",{parentName:"tr",align:null},"S\xed, la referencia no puede cambiar")))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Alcance: D\xf3nde se puede acceder a esa variable en el c\xf3digo.")),(0,t.yg)("h2",{id:"alcance-scope"},"Alcance (Scope)"),(0,t.yg)("p",null,"El alcance de una variable determina d\xf3nde se puede acceder a esa variable en el c\xf3digo."),(0,t.yg)("h3",{id:"alcance-de-funci\xf3n-function-scope"},"Alcance de Funci\xf3n (Function Scope)"),(0,t.yg)("p",null,"Las variables declaradas con ",(0,t.yg)("inlineCode",{parentName:"p"},"var")," tienen alcance de funci\xf3n. Esto significa que si una variable es declarada dentro de una funci\xf3n, no se puede acceder a ella desde fuera de esa funci\xf3n."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-js"},"function ejemploVar() {\n  var x = 10; \n  if (true) { \n    var x = 20; // misma variable\n    console.log(x); // 20\n  }\n  console.log(x); // 20\n}\nconsole.log(x); // Error: x is not defined\n")),(0,t.yg)("h2",{id:"alcance-de-bloque-block-scope"},"Alcance de Bloque (Block Scope)"),(0,t.yg)("p",null,"Las variables declaradas con ",(0,t.yg)("inlineCode",{parentName:"p"},"let")," y ",(0,t.yg)("inlineCode",{parentName:"p"},"const")," tienen alcance de bloque. Esto significa que solo se puede acceder a ellas dentro del bloque donde fueron declaradas (un bloque es cualquier c\xf3digo dentro de llaves {})."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-js"},"function ejemploLetConst() {\n  let y = 10;\n  const z = 30;\n  if (true) { \n    let y = 20; // variable diferente\n    const z = 40; // variable diferente\n    console.log(y); // 20\n    console.log(z); // 40\n  }\n  console.log(y); // 10, porque y dentro del if es una variable diferente\n  console.log(z); // 30, porque z dentro del if es una variable diferente\n}\nconsole.log(y); // Error: y is not defined\nconsole.log(z); // Error: z is not defined\n")))}u.isMDXComponent=!0}}]);