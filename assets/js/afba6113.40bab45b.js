"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4094],{5680:(e,a,r)=>{r.d(a,{xA:()=>p,yg:()=>m});var n=r(6540);function o(e,a,r){return a in e?Object.defineProperty(e,a,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[a]=r,e}function i(e,a){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),r.push.apply(r,n)}return r}function t(e){for(var a=1;a<arguments.length;a++){var r=null!=arguments[a]?arguments[a]:{};a%2?i(Object(r),!0).forEach((function(a){o(e,a,r[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(r,a))}))}return e}function l(e,a){if(null==e)return{};var r,n,o=function(e,a){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],a.indexOf(r)>=0||(o[r]=e[r]);return o}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],a.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),d=function(e){var a=n.useContext(s),r=a;return e&&(r="function"==typeof e?e(a):t(t({},a),e)),r},p=function(e){var a=d(e.components);return n.createElement(s.Provider,{value:a},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},g=n.forwardRef((function(e,a){var r=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=d(r),g=o,m=c["".concat(s,".").concat(g)]||c[g]||u[g]||i;return r?n.createElement(m,t(t({ref:a},p),{},{components:r})):n.createElement(m,t({ref:a},p))}));function m(e,a){var r=arguments,o=a&&a.mdxType;if("string"==typeof e||o){var i=r.length,t=new Array(i);t[0]=g;var l={};for(var s in a)hasOwnProperty.call(a,s)&&(l[s]=a[s]);l.originalType=e,l[c]="string"==typeof e?e:o,t[1]=l;for(var d=2;d<i;d++)t[d]=r[d];return n.createElement.apply(null,t)}return n.createElement.apply(null,r)}g.displayName="MDXCreateElement"},6606:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>s,contentTitle:()=>t,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var n=r(8168),o=(r(6540),r(5680));const i={},t=void 0,l={unversionedId:"javascript/operadores",id:"javascript/operadores",title:"operadores",description:"---",source:"@site/docs/javascript/operadores.md",sourceDirName:"javascript",slug:"/javascript/operadores",permalink:"/wiki.dbquiroga/docs/javascript/operadores",draft:!1,editUrl:"https://github.com/dbquiroga/wiki.dbquiroga/edit/main/docs/javascript/operadores.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Nombrando Funciones",permalink:"/wiki.dbquiroga/docs/javascript/nomenclatura"}},s={},d=[{value:"title: Operadores",id:"title-operadores",level:2},{value:"Operadores de comparaci\xf3n: igualdad en JavaScript",id:"operadores-de-comparaci\xf3n-igualdad-en-javascript",level:2},{value:"<code>==</code> (Igualdad d\xe9bil)",id:"-igualdad-d\xe9bil",level:3},{value:"=== (Igualdad estricta)",id:"-igualdad-estricta",level:3}],p={toc:d},c="wrapper";function u(e){let{components:a,...r}=e;return(0,o.yg)(c,(0,n.A)({},p,r,{components:a,mdxType:"MDXLayout"}),(0,o.yg)("hr",null),(0,o.yg)("p",null,"sidebar_position: 6"),(0,o.yg)("h2",{id:"title-operadores"},"title: Operadores"),(0,o.yg)("h1",{id:"operadores"},"Operadores"),(0,o.yg)("p",null,"Los operadores son s\xedmbolos que realizan operaciones sobre uno o m\xe1s operandos. Algunos ejemplos de operadores en JavaScript incluyen:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Operadores de asignaci\xf3n: ",(0,o.yg)("inlineCode",{parentName:"li"},"="),", ",(0,o.yg)("inlineCode",{parentName:"li"},"+="),", ",(0,o.yg)("inlineCode",{parentName:"li"},"-="),", etc."),(0,o.yg)("li",{parentName:"ul"},"Operadores aritm\xe9ticos: ",(0,o.yg)("inlineCode",{parentName:"li"},"+"),", ",(0,o.yg)("inlineCode",{parentName:"li"},"-"),", ",(0,o.yg)("inlineCode",{parentName:"li"},"*"),", ",(0,o.yg)("inlineCode",{parentName:"li"},"/"),", ",(0,o.yg)("inlineCode",{parentName:"li"},"%"),", etc."),(0,o.yg)("li",{parentName:"ul"},"Operadores de comparaci\xf3n: ",(0,o.yg)("inlineCode",{parentName:"li"},"=="),", ",(0,o.yg)("inlineCode",{parentName:"li"},"==="),", ",(0,o.yg)("inlineCode",{parentName:"li"},"!="),", ",(0,o.yg)("inlineCode",{parentName:"li"},"!=="),", ",(0,o.yg)("inlineCode",{parentName:"li"},">"),", ",(0,o.yg)("inlineCode",{parentName:"li"},"<"),", ",(0,o.yg)("inlineCode",{parentName:"li"},">="),", ",(0,o.yg)("inlineCode",{parentName:"li"},"<="),", etc."),(0,o.yg)("li",{parentName:"ul"},"Operadores l\xf3gicos: ",(0,o.yg)("inlineCode",{parentName:"li"},"&&"),", ",(0,o.yg)("inlineCode",{parentName:"li"},"||"),", ",(0,o.yg)("inlineCode",{parentName:"li"},"!")),(0,o.yg)("li",{parentName:"ul"},"Operadores de incremento/decremento: ",(0,o.yg)("inlineCode",{parentName:"li"},"++"),", ",(0,o.yg)("inlineCode",{parentName:"li"},"--"))),(0,o.yg)("h2",{id:"operadores-de-comparaci\xf3n-igualdad-en-javascript"},"Operadores de comparaci\xf3n: igualdad en JavaScript"),(0,o.yg)("p",null,"En JavaScript, existen dos operadores principales para comparar valores: ",(0,o.yg)("inlineCode",{parentName:"p"},"==")," (igualdad d\xe9bil) y ",(0,o.yg)("inlineCode",{parentName:"p"},"===")," (igualdad estricta)."),(0,o.yg)("h3",{id:"-igualdad-d\xe9bil"},(0,o.yg)("inlineCode",{parentName:"h3"},"==")," (Igualdad d\xe9bil)"),(0,o.yg)("p",null,"El operador ",(0,o.yg)("inlineCode",{parentName:"p"},"==")," compara dos valores para ver si son iguales, pero realiza una conversi\xf3n de tipo si es necesario. Esto significa que dos valores pueden ser considerados iguales incluso si no son del mismo tipo."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js"},"console.log(5 == '5'); // true, porque '5' se convierte a n\xfamero antes de la comparaci\xf3n\nconsole.log(null == undefined); // true, porque se consideran iguales en igualdad d\xe9bil\nconsole.log(0 == false); // true, porque false se convierte a 0 antes de la comparaci\xf3n\n")),(0,o.yg)("h3",{id:"-igualdad-estricta"},"=== (Igualdad estricta)"),(0,o.yg)("p",null,"El operador ",(0,o.yg)("inlineCode",{parentName:"p"},"===")," compara dos valores para ver si son iguales, pero no realiza ninguna conversi\xf3n de tipo. Esto significa que dos valores solo se consideran iguales si son del mismo tipo y tienen el mismo valor."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js"},"console.log(5 === '5'); // false, porque los tipos son diferentes\nconsole.log(null === undefined); // false, porque los tipos son diferentes\nconsole.log(0 === false); // false, porque los tipos son diferentes\nconsole.log(5 === 5); // true, porque ambos son del mismo tipo y tienen el mismo valor\n")),(0,o.yg)("p",null,"::info En resumen, es recomendable usar === (igualdad estricta) para evitar errores inesperados debido a la conversi\xf3n de tipos impl\xedcita que realiza == (igualdad d\xe9bil)"))}u.isMDXComponent=!0}}]);