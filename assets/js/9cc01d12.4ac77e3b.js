"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2452],{5680:(e,a,n)=>{n.d(a,{xA:()=>c,yg:()=>g});var r=n(6540);function o(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function t(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?t(Object(n),!0).forEach((function(a){o(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):t(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function s(e,a){if(null==e)return{};var n,r,o=function(e,a){if(null==e)return{};var n,r,o={},t=Object.keys(e);for(r=0;r<t.length;r++)n=t[r],a.indexOf(n)>=0||(o[n]=e[n]);return o}(e,a);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(r=0;r<t.length;r++)n=t[r],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),l=function(e){var a=r.useContext(u),n=a;return e&&(n="function"==typeof e?e(a):i(i({},a),e)),n},c=function(e){var a=l(e.components);return r.createElement(u.Provider,{value:a},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},m=r.forwardRef((function(e,a){var n=e.components,o=e.mdxType,t=e.originalType,u=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(n),m=o,g=d["".concat(u,".").concat(m)]||d[m]||p[m]||t;return n?r.createElement(g,i(i({ref:a},c),{},{components:n})):r.createElement(g,i({ref:a},c))}));function g(e,a){var n=arguments,o=a&&a.mdxType;if("string"==typeof e||o){var t=n.length,i=new Array(t);i[0]=m;var s={};for(var u in a)hasOwnProperty.call(a,u)&&(s[u]=a[u]);s.originalType=e,s[d]="string"==typeof e?e:o,i[1]=s;for(var l=2;l<t;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5459:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>u,contentTitle:()=>i,default:()=>p,frontMatter:()=>t,metadata:()=>s,toc:()=>l});var r=n(8168),o=(n(6540),n(5680));const t={sidebar_position:13,title:"API Testing"},i=void 0,s={unversionedId:"qa-automation/api",id:"qa-automation/api",title:"API Testing",description:"Que es una API",source:"@site/docs/qa-automation/api.md",sourceDirName:"qa-automation",slug:"/qa-automation/api",permalink:"/wiki.dbquiroga/docs/qa-automation/api",draft:!1,editUrl:"https://github.com/dbquiroga/wiki.dbquiroga/edit/main/docs/qa-automation/api.md",tags:[],version:"current",sidebarPosition:13,frontMatter:{sidebar_position:13,title:"API Testing"},sidebar:"tutorialSidebar",previous:{title:"Selenium",permalink:"/wiki.dbquiroga/docs/selenium"},next:{title:"Postman",permalink:"/wiki.dbquiroga/docs/qa-automation/postman"}},u={},l=[{value:"Que es una API",id:"que-es-una-api",level:2},{value:"Que es un metodo?",id:"que-es-un-metodo",level:2},{value:"\xbfQu\xe9 es api rest?",id:"qu\xe9-es-api-rest",level:2},{value:"Codigos de estado mas comunes",id:"codigos-de-estado-mas-comunes",level:3},{value:"Clientes REST",id:"clientes-rest",level:2}],c={toc:l},d="wrapper";function p(e){let{components:a,...n}=e;return(0,o.yg)(d,(0,r.A)({},c,n,{components:a,mdxType:"MDXLayout"}),(0,o.yg)("h2",{id:"que-es-una-api"},"Que es una API"),(0,o.yg)("p",null,"Es un punto de acceso. Una API (Application Programming Interface) es una herramienta que permite que diferentes aplicaciones y sistemas se comuniquen y compartan informaci\xf3n entre s\xed. "),(0,o.yg)("h2",{id:"que-es-un-metodo"},"Que es un metodo?"),(0,o.yg)("p",null,"Un m\xe9todo se refiere a una solicitud espec\xedfica que se puede hacer a un servicio o recurso que est\xe1 disponible a trav\xe9s de una API. Los m\xe9todos son como acciones que un usuario puede realizar en una aplicaci\xf3n o un servicio, como obtener informaci\xf3n, crear o actualizar datos, o eliminar informaci\xf3n existente."),(0,o.yg)("p",null,"Los m\xe9todos se definen en el dise\xf1o de la API y especifican qu\xe9 tipo de acci\xf3n se puede realizar en un recurso espec\xedfico, como:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("strong",{parentName:"li"}," GET ")," (para obtener informaci\xf3n)"),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("strong",{parentName:"li"}," POST ")," (para crear nuevos datos)"),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("strong",{parentName:"li"}," PUT ")," (para actualizar datos existentes) y"),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("strong",{parentName:"li"}," DELETE ")," (para eliminar datos)"),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("strong",{parentName:"li"}," PATCH ")," (PARA modificar solamente un atributo de un recurso).")),(0,o.yg)("p",null,"Al utilizar los m\xe9todos correctos en una API, se pueden hacer solicitudes espec\xedficas a un servicio o recurso y recibir la informaci\xf3n correspondiente en respuesta."),(0,o.yg)("h2",{id:"qu\xe9-es-api-rest"},"\xbfQu\xe9 es api rest?"),(0,o.yg)("p",null,"API REST es una forma de dise\xf1ar una API web que permite a diferentes sistemas y aplicaciones comunicarse entre s\xed utilizando un conjunto est\xe1ndar de convenciones de interfaz y protocolos de comunicaci\xf3n."),(0,o.yg)("p",null,"Es un punto de acceso que usa como est\xe1ndar rest.. El est\xe1ndar se define en los atributos que se utilizan:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"d\xf3nde (cabecera o body): . Las cabeceras permiten a los clientes enviar informaci\xf3n adicional al servidor, como la autenticaci\xf3n del usuario o informaci\xf3n sobre el formato de los datos que se est\xe1n enviando o solicitando. El cuerpo de una solicitud o respuesta HTTP contiene los datos que se env\xedan o reciben a trav\xe9s de la API. En el caso de una solicitud, el cuerpo puede contener datos como los par\xe1metros de una b\xfasqueda o la informaci\xf3n de un nuevo recurso que se est\xe1 creando. En el caso de una respuesta, el cuerpo contiene la informaci\xf3n que se est\xe1 enviando de vuelta al cliente en respuesta a su solicitud."),(0,o.yg)("li",{parentName:"ul"},"tambi\xe9n definen el est\xe1ndar de la URL. Tiene que ser unica. "),(0,o.yg)("li",{parentName:"ul"},"Verbos HTTPS: los tipos de m\xe9todos(get, post, patch\u2026) para indicar qu\xe9 acci\xf3n se est\xe1 realizando en el recurso identificado."),(0,o.yg)("li",{parentName:"ul"},"Representaci\xf3n de recursos: los recursos o datos se representan en un formato estandarizado, como JSON o XML."),(0,o.yg)("li",{parentName:"ul"},"Codigos de estado HTTPS:Estos c\xf3digos se dividen en cinco categor\xedas: informativa (100-199), \xe9xito (200-299), redirecci\xf3n (300-399), error del cliente (400-499) y error del servidor (500-599).")),(0,o.yg)("h3",{id:"codigos-de-estado-mas-comunes"},"Codigos de estado mas comunes"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"200 OK. Respuesta est\xe1ndar para peticiones correctas."),(0,o.yg)("li",{parentName:"ul"},"201 Created. La petici\xf3n ha sido completada y ha resultado en la creaci\xf3n de un nuevo recurso."),(0,o.yg)("li",{parentName:"ul"},"202 Accepted. La petici\xf3n ha sido aceptada para procesamiento, pero este no ha sido completado."),(0,o.yg)("li",{parentName:"ul"},"400 Bad Request. La solicitud contiene sintaxis err\xf3nea."),(0,o.yg)("li",{parentName:"ul"},"403 Forbidden. La solicitud fue legal, pero el servidor reh\xfasa responder dado que el cliente no tiene los privilegios para hacerla."),(0,o.yg)("li",{parentName:"ul"},"404 Not Found. Recurso no encontrado. Se utiliza cuando el servidor web no encuentra la p\xe1gina o recurso solicitado."),(0,o.yg)("li",{parentName:"ul"},"500 Internal Server Error. Es un c\xf3digo com\xfanmente emitido por aplicaciones empotradas en servidores web, cuando se encuentran con situaciones de error ajenas a la naturaleza del servidor web")),(0,o.yg)("h2",{id:"clientes-rest"},"Clientes REST"),(0,o.yg)("p",null,"Son herramientas que se utiliza para interactuar con una API REST. Es un programa que env\xeda solicitudes HTTP a un servidor web que implementa una API REST y recibe las respuestas del servidor en el formato deseado (generalmente en JSON o XML)."),(0,o.yg)("p",null,"Los mas usados:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Postman"),(0,o.yg)("li",{parentName:"ul"},"Insomnia")))}p.isMDXComponent=!0}}]);